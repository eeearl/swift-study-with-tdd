## Advantages of TDD (TDD의 장점)

  TDD는 장점과 단점을 둘다 가지고 있다. 아래에 주요 장점들을 나열해 본다.

  * 오직 코드작성만을 필요로 한다.
    - 룰에만 따르면 되고, 모든 테스트가 통과될 때까지만 코드를 작성하면 된다. 만약에 프로젝트가 다른 기능을 추가하고자 하면 기능에 대한 작성만 하면된다. 코드는 코드로써 가능하면 가장 간단하게만 작성하면 되고 모든 코드의 마지막은 모든 필요한 기능들의 구현만 하면 된다.
  * 좀더 코드를 모듈화 하게 디자인 할수 있다.
    - TDD안에서 작은 기능하나의 고민을 하게된다. 그리고 첫번째 테스트의 작성을 할때 자동적으로 쉽게 테스트된다. 코드는 쉽게 테스트 되고 깔끔한 인터페이스를 가진다. 결과적으로 모듈러 디자인을 가진 어플리케이션이 된다.
  * 관리가 쉬워진다.
    - 각각의 어플리케이션의 여러 부분들이 분리되고 깔끔한 인터페이스를 가진다. 그 코드는 관리하기 쉽게 된다. 잘 작성된  작은 기능과 다른 모듈과 연관성 없이 코드를 교체할 수 있다. 지속적으로 테스트를 하고 재작성으로 어플리케이션을 완성한다. 모든 테스트를 통과시켰을때, 완성할 것이다.
  * 리팩토링하기 쉽다.
    - 모든 기능들은 테스트에 통과되어 진다. 당신은 갑작스러운 변화에 대해 두려워할 필요가 없다. 왜냐하면 만약 모든 테스트가 통과되어 지고 있다면, 모든게 괜찮을 것이다. 이것은 굉장히 중요한 점인데, 당신이 개발자라면, 당신의 스킬을 매일 향상시킬 것이다. 만약에 프로젝트가 시작한지 6개월째가 되고 있다면 아마 당신은 굉장히 많은 생각을 코드로 만들기 위해 생각했었을 것이다. But your memory about all the didderent parts and how they fit together isn't fresh anymore, 그래서 위험하게 변할것이다. 완벽하게 짜여진 테스트와 당신은 쉽게 항샹할 것이다. 멈추는것에 두려움 없이.
  * 테스트를 적용하는 범위가 높아진다.
    - 모든 기능에 테스트가 들어있다. 이것은 높은 테스트 적용범위안의 결과이다. 높은 테스트의 적용범위는 당신의 코드에 대한 자신감을 얻게 해줄것이다.
  * 코드자체로 문서화가 가능해진다.
    - 테스트 코드는 어떻게 당신이 이 코드를 만들었었는지 보여준다. 이 문서는 곧 당신의 코드이다. 테스트 코드는 샘플코드이고 이 코드는 무엇을 하고 어떻게 인터페이스를 가졌었는지 보여준다.
  * 디버깅이 줄어든다.
    - 얼마나 자주 버그로 인해서 시간을 보내는가? 얼마나 자주 에러메세지를 복사해서 인터넷에서 찾아보는가? TDD와 함께하면 적은 버그들과 함께 작성될 것이다. 왜냐하면 테스트는 당신에서 얼마나 실수를 만들었었는지 금방 말해준다. 그리고 버그들을 찾기가 훨씬 쉬워진다.